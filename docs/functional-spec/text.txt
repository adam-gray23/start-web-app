## **1. Introduction**

- **Overview**

Provides a brief overview of the system / product to be developed. It should include a description of the need for the system, briefly describe its functions and explain how it will work with other systems (if appropriate).

We will be developing a web application that will allow new programmers to learn our previously developed programming language, START, on the web in an easily accessible way. Our aim with this project is to make our language, and programming in
general, more accessible to an average computer user who may have no previous experience with programming at all. This web application will be developed using a tech stack consisting of Django, Python, HTML, CSS, JavaScript, Docker and some small
elements of START as well. The back end will be primarily Python with the front end consisting of HTML, CSS and JavaScript, and this will then use a contained environment to run the user's written code using Docker.

The user's will firstly be able to read about START, as well as having access to a set of informative videos that will explain not only the language itself, but also the concepts of programming in general. The user will then be able to write their
own code to solve some simple programming exercises, and test the concepts they have learned. The user will be given an IDE built into the web application, and will be able to write their code in this IDE, and then run it to see the output. One of the
main reasons for developing this web application, after making a more accessible language, to make programming itself for accesible, and as well as this, make an environment that is easy to use and understand, providing a simple to use
debugger and will use animations to show the user where they may be making mistakes in their code.

- **Business Context**

Provides an overview of the business organization sponsoring the development of this system / product or in which the system / product will / could be deployed. *Note - may not be applicable to all projects*

Currently there are no plans to monetize our system, as we plan for it to be free to use for all, to make it as accessible as possible.

Potential does exist, like our previous project, for this to become a way of teaching younger audiences how to program, and even have this
as a potential seller to institutions and schools, but no such plan is in place as of now, as we believe free software is best for everyone.

- **Glossary**

Define and technical terms used in this document. *Only include those with which the reader may not be familiar.*

[UPDATE AT THE END]

## **2. General Description**

**2.1 Product / System Functions**

Describes the general functionality of the system / product.

Our web application will be a web based version of our programming language START, which is a novice friendly programming language. It will still
be targetted to novice programmers, and will be a way for them to learn the language, and programming in general, in a more accessible way, as many
people do not know about GitHub, where our language is currently available.

- Our app will be seen on the web, and will be styled using HTML, CSS and JavaScript.

- The user's of the site will be able to read about the languages features, using the documentation we have already written, and will be able to watch
informative videos about the language, and programming concepts. This will be a good way to "dip their toes" into programming, and see if it is something
that takes their interest before writing more complex code. We will implement these pages using HTML, CSS and JavaScript, while storing the files and videos
needed in the back end database.

- The user will then be able to go the the IDE, and write their own code, and run it to see the output. This will be a good way for them to test the concepts
learned previously from the videos and documentation. This IDE will be a mostly JavaScript based IDE, with the code being run in a contained environment using
Docker. We will take the user's code and pass it to the container where it will be run, the output will be collected, and then sent back to the user for them
to see.

- The user will also have access to a debugger that they can use to find errors in their code. This simple debugger will be animated to show the user where
they have made an error. This will be a good way for the user to learn how to debug their code, and will be a good way for them to learn how to find errors
themselves in the future. [HOW TO DO DEBUGGER???]

**2.2 User Characteristics and Objectives**

Describes the features of the user community, including their expected expertise with software systems and the application domain. Explain the objectives and requirements for the system from the user's perspective. It may include a "wish list" of desirable characteristics, along with more feasible solutions that are in line with the business objectives.

Our project is still targetted at beginner programmers, and as such will be designed to be as accessible as possible. We will be using a simple design for all elements of
the site to make programming "less intimidating" for new programmers. After our research into beginner programmers and programming languages earlier this year, as well as
the data we collected from testing our language with new programmers, we have came up with a key list of characteristics that our project must follow, these are:

- To make an environment that is not only easy to navigate but easy to use, to make the user feel more comfortable with programming. This will be done to allow
for the assumption that some users may have very little experience with computers, and as such, may not be able to navigate a more complex environment.
- To give the user one space to learn about, write and run their code, to cut down any frustration that may come from learning programming on their own.
- To create an easy to use debugger to help the user understand how to look for errors in their code, and to help them learn how to debug their code themselves.
- To provide useful resources for the user to learn about programming concepts in START, and programming in general, to help them learn how to program, as well
as cutting down time spent needing to do outside reasearch about topics.


**2.3 Operational Scenarios**

This section should describe a set of scenarios that illustrate, from the user's perspective, what will be experienced when utilizing the system under various situations.

In the article Inquiry-Based Requirements Analysis (IEEE Software, March 1994), scenarios are defined as follows:

In the broad sense, a scenario is simply a proposed specific use of the system. More specifically, a scenario is a description of one or more end-to-end transactions involving the required system and its environment. Scenarios can be documented in different ways, depending up on the level of detail needed. The simplest form is a use case, which consists merely of a short description with a number attached. More detailed forms are called scripts.

**2.4 Constraints**

Lists general constraints placed upon the design team, including speed requirements, industry protocols, hardware platforms, and so forth.

## **3. Functional Requirements**

This section lists the functional requirements in ranked order. Functional requirements describes the possible effects of a software system, in other words, *what* the system must accomplish. Other kinds of requirements (such as interface requirements, performance requirements, or reliability requirements) describe *how* the system accomplishes its functional requirements.

As an example, each functional requirement could be specified in a format similar to the following:

- **Description -** A full description of the requirement.
- **Criticality -** Describes how essential this requirement is to the overall system.
- **Technical issues -** Describes any design or implementation issues involved in satisfying this requirement.
- **Dependencies with other requirements -** Describes interactions with other requirements.
- **Others as appropriate**

## **4. System Architecture**

This section describes a high-level overview of the anticipated system architecture showing the distribution functions across (potential) system modules. Architectural components that are reused or 3rd party should be highlighted.

## **5. High-Level Design**

This section should set out the high-level design of the system. It should include one or more system models showing the relationship between system components and the systems and its environment. These might be object-models, DFD, etc.

## **6. Preliminary Schedule**

This section provides an initial version of the project plan, including the major tasks to be accomplished, their interdependencies, and their tentative start/stop dates. The plan also includes information on hardware, software, and wetware resource requirements. The project plan should be accompanied by one or more PERT or GANTT charts.

## **7. Appendices**

Specifies other useful information for understanding the requirements.